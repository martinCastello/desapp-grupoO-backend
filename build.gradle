plugins {
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'war'
	id 'idea'
	id 'eclipse'
	id 'jacoco'
}

eclipseJdt {
	doLast {
		ant.propertyfile(file: ".settings/org.eclipse.core.resources.prefs") {
			ant.entry(key: "eclipse.preferences.version", value: "1")
			ant.entry(key: "encoding/<project>", value: "utf-8")
		}
	}
}

compileJava.options.encoding = 'utf-8'
compileTestJava.options.encoding = 'utf-8'

group = 'ar.edu.unq.desapp.grupo-o-022020'
version = '0.0.3-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenLocal()
    	jcenter()
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
	compile 'org.springdoc:springdoc-openapi-ui:1.2.32'
	compile 'io.springfox:springfox-swagger2:2.9.2'
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/repositories/*', 
	                    	'**/service/*', 
	                    	'**/utils/*', 
	                    	'**/ws/*'])
        }))
    }
}
